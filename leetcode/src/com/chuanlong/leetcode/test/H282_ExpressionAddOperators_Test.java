package com.chuanlong.leetcode.test;

import java.util.ArrayList;
import java.util.List;
import java.util.SortedSet;

import com.chuanlong.leetcode.hard.H282_ExpressionAddOperators;

public class H282_ExpressionAddOperators_Test {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		
		System.out.println("Correct:" + Correct.length + ", Wrong:" + Wrong.length);
		
		List<String> c = new ArrayList<String>();
		
		for(int i=0; i<Correct.length; i++){
			boolean isFind = false;
			for(int j=0; j<Wrong.length; j++){
				if(Correct[i].equals(Wrong[j])){
					isFind = true;
					break;
				}
			}
			if(!isFind){
				c.add(Correct[i]);
			}
		}
		
		System.out.println("Correct more:" + c.size() + ", include:" + H282_ExpressionAddOperators.List2String(c));
		
	}
	
	final static String[] Wrong = new String[] { "1-2-3-4*5+6-78-9",
			"1-2-3-45-6-7-89", "1-2-3+4-5*6-78-9", "1-2-3+45+6-7-8-9",
			"1-2-3*4*5-6+7-8-9", "1-2+3-4-5-67-8+9", "1-2+3-45-6+7-8+9",
			"1-2+3*4-5+6+7*8-9", "1-2+3*4+5+6-78-9", "1-2+34-5+6+78-9",
			"1-2+34-56+7+8+9", "1-2+34+5-6+7+8*9", "1-2*3-4+5-6-7*8-9",
			"1-2*3-4+5+6*7+8-9", "1-2*3-4+56+7-8+9", "1-2*3-4*5-6*7-8*9",
			"1-2*3-4*5+6+7+8+9", "1-2*3-45-67-8*9", "1-2*3+4-5*6+7+8+9",
			"1-2*3+4+5-6*7+8+9", "1-2*3+4+5+6-7*8+9", "1-2*3+4+5+6+7-8*9",
			"1-2*3*4-5-6-78-9", "1-2*3*4+5+6-7+8*9", "1-23-4-5-67-8-9",
			"1-23-4*5-6*7-89", "1-23-45-67-89", "1-23+4-5+67+8-9",
			"1-23+4+5+6+7-89", "1-23*4-5+6*7+89", "1+2-3-4*5+6*7-8+9",
			"1+2-3-45-6-7+8-9", "1+2-3-45+6-7+8-9", "1+2-3+4+5*6-7+8*9",
			"1+2-3+45+6-7+89", "1+2-3*4-5*6+7+8+9", "1+2-3*4+5-6*7+8+9",
			"1+2-3*4+5+6-7*8+9", "1+2-3*4+5+6+7-8*9", "1+2-3*4*5-6+7+89",
			"1+2-34-5+6-7-8*9", "1+2-34-5+6+7*8+9", "1+2-34+5+6-78+9",
			"1+2+3-4*5-6*7+8+9", "1+2+3-4*5+6-7*8+9", "1+2+3-4*5+6+7-8*9",
			"1+2+3-45-67+8+9", "1+2+3+4-5*6-7*8+9", "1+2+3+4-5*6+7-8*9",
			"1+2+3+4+5-6*7-8*9", "1+2+3+4+5+6+7+8+9", "1+2+3*4+5+6*7-8+9",
			"1+2+3*4*5+6-7+8+9", "1+2*3-4+5+6*7-89", "1+2*3+4*5-6-7+8+9",
			"1+2*3+4*5*6+7-89", "1+2*3*4-5-6*7-8+9", "1+2*3*4+5*6+7-8+9",
			"1+2*3*4*5+6+7-89", "1+23-4+5-6+7+8+9", "1+23-4+5+6*7-8*9",
			"1+23-4*5-6*7+8-9", "1+23-4*5+6-7*8-9", "1+23-45-67+8-9",
			"1+23+4-5+67-89", "1+23+4-5*6-7*8-9", "1+23+4+5+6+7+8-9",
			"1+23*4-5+6*7-8-9", "1+23*4-56-7-8-9", "1+23*4+5-6+7*8-9",
			"1*2-3-4-5+6*7-89", "1*2-3+4-56-7+8-9", "1*2-3+4*5-67+8-9",
			"1*2-3*4-5+67-8+9", "1*2-34-5*6+7*8-9", "1*2+3-45-6+7+8*9",
			"1*2+3+4-5-6*7+8-9", "1*2+3+4-5+6-7*8-9", "1*2+3+4+5*6+7+8-9",
			"1*2+3+45+67-8*9", "1*2+3*4-56-78+9", "1*2+34-5-6+7-8-9",
			"1*2+34-56-7*8+9", "1*2+34-56+7-8*9", "1*2+34+5-6+7-8+9",
			"1*2+34+56-7*8-9", "1*2*3-4*5-6*7+8+9", "1*2*3-4*5+6-7*8+9",
			"1*2*3-4*5+6+7-8*9", "1*2*3-45-67+8+9", "1*2*3+4-5*6-7*8+9",
			"1*2*3+4-5*6+7-8*9", "1*2*3+4+5-6*7-8*9", "1*2*3+4+5+6+7+8+9",
			"1*2*3*4+5+6-7-8+9", "1*2*3*4*5-6+78-9", "12-3-4+56-7+8+9",
			"12-3-4*5+6-7-8+9", "12-3+4-5*6-7-8+9", "12-3+4+56-7+89",
			"12-3+45+6-78+9", "12-3*4+5-67-8+9", "12-3*4*5-6+78+9",
			"12+3-4*5-67-8+9", "12+3-45-6+78-9", "12+3+4-56+7-89",
			"12+3*4+5+6-7-8+9", "12+34-5+6+7-8+9", "12*3-4+5+6-7+8+9",
			"12*3-4+56-78-9", "12*3+4+5-6-7+8-9", "12*3+4+5+6-7+8-9",
			"12*3*4-5*6+78-9" };
	

	final static String[] Correct = new String[] { "1*2*3*4*5-6-78+9",
			"1*2*3*4+5+6-7+8+9", "1*2*3+4+5+6+7+8+9", "1*2*3+4+5-6*7+8*9",
			"1*2*3+4-5*6+7*8+9", "1*2*3+4-5*6-7+8*9", "1*2*3-4*5+6*7+8+9",
			"1*2*3-4*5-6+7*8+9", "1*2*3-4*5-6-7+8*9", "1*2*3-45+67+8+9",
			"1*2*34+56-7-8*9", "1*2*34-5+6-7-8-9", "1*2+3*4-56+78+9",
			"1*2+3+4+5*6+7+8-9", "1*2+3+4-5+6*7+8-9", "1*2+3+4-5-6+7*8-9",
			"1*2+3+45+67-8*9", "1*2+3-45+6+7+8*9", "1*2+34+5-6-7+8+9",
			"1*2+34+56-7*8+9", "1*2+34-5+6+7-8+9", "1*2+34-56+7*8+9",
			"1*2+34-56-7+8*9", "1*2-3*4+5+67-8-9", "1*2-3+4-5-6*7+89",
			"1*2-3-4*5+67+8-9", "1*2-3-4+56-7-8+9", "1*2-34+5*6+7*8-9",
			"1*23+4*5-6+7-8+9", "1*23-4-56-7+89", "1+2*3*4*5+6+7-89",
			"1+2*3*4+5*6+7-8-9", "1+2*3*4-5+6*7-8-9", "1+2*3+4*5*6+7-89",
			"1+2*3+4*5-6+7+8+9", "1+2*3-4-5-6*7+89", "1+2*34-5*6+7+8-9",
			"1+2+3*4*5+6-7-8-9", "1+2+3*4+5+6*7-8-9", "1+2+3*45-6-78-9",
			"1+2+3+4+5+6+7+8+9", "1+2+3+4+5-6*7+8*9", "1+2+3+4-5*6+7*8+9",
			"1+2+3+4-5*6-7+8*9", "1+2+3-4*5+6*7+8+9", "1+2+3-4*5-6+7*8+9",
			"1+2+3-4*5-6-7+8*9", "1+2+3-45+67+8+9", "1+2-3*4*5+6+7+89",
			"1+2-3*4+5*6+7+8+9", "1+2-3*4-5+6*7+8+9", "1+2-3*4-5-6+7*8+9",
			"1+2-3*4-5-6-7+8*9", "1+2-3+4*5+6*7-8-9", "1+2-3+45+6-7-8+9",
			"1+2-3+45-6+7+8-9", "1+2-3-4-5*6+7+8*9", "1+2-3-45-6+7+89",
			"1+2-34+5+6+7*8+9", "1+2-34+5+6-7+8*9", "1+2-34-5-6+78+9",
			"1+23*4+5-6-7*8+9", "1+23*4-5-6*7+8-9", "1+23*4-56+7-8+9",
			"1+23+4+5+6+7+8-9", "1+23+4-5*6+7*8-9", "1+23+4-5-67+89",
			"1+23-4*5+6*7+8-9", "1+23-4*5-6+7*8-9", "1+23-4-5+6+7+8+9",
			"1+23-4-5-6*7+8*9", "1+23-45+67+8-9", "1-2*3*4+5-6+78-9",
			"1-2*3*4-5-6+7+8*9", "1-2*3+4*5+6+7+8+9", "1-2*3+4*5-6*7+8*9",
			"1-2*3+4+5+6*7+8-9", "1-2*3+4+5-6+7*8-9", "1-2*3+4+56+7-8-9",
			"1-2*3+45-67+8*9", "1-2*3-4+5*6+7+8+9", "1-2*3-4-5+6*7+8+9",
			"1-2*3-4-5-6+7*8+9", "1-2*3-4-5-6-7+8*9", "1-2*34+5*6-7+89",
			"1-2+3*4*5-6-7+8-9", "1-2+3+4-5*6+78-9", "1-2+3+45+6-7+8-9",
			"1-2+3-4*5-6+78-9", "1-2+3-45+6-7+89", "1-2-3*4+5+6+7*8-9",
			"1-2-3*4-5-6+78-9", "1-2-3+4-5+67-8-9", "1-2-3+45-6-7+8+9",
			"1-2-34+5+6+78-9", "1-2-34+56+7+8+9", "1-2-34-5+6+7+8*9",
			"1-23*4+5+6*7+89", "1-23+4*5-6*7+89", "1-23+4-5+67-8+9",
			"1-23+45-67+89", "1-23-4+5+67+8-9", "1-23-4-5-6-7+89",
			"12*3*4-5*6-78+9", "12*3+4+5+6-7-8+9", "12*3+4+5-6+7+8-9",
			"12*3-4-5-6+7+8+9", "12*3-4-56+78-9", "12+3*4+5+6-7+8+9",
			"12+3*45-6-7-89", "12+3+4-56-7+89", "12+3-4*5+67-8-9",
			"12+3-45+6+78-9", "12+34-5-6-7+8+9", "12-3*4*5+6+78+9",
			"12-3*4-5+67-8-9", "12-3+4*5+6-7+8+9", "12-3+4+56-7-8-9",
			"12-3-4+5*6-7+8+9", "12-3-4-56+7+89", "12-3-45-6+78+9" };

}
